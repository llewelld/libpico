/**
@mainpage

\section libpico Libpico Overview

<b>Version $(VERSION)</b>

\subsection summary Summary

This manual documents the libpico API version $(VERSION). It provides structures and functions for performing the SIGMA-I protocol as used by Pico, along with other Pico-relevant functionality such as managing users, performing cryptographic functions and so on.

\subsection structure Documentation structure

The API is structured into related material, however in general functionality is partitioned appropriately by file. Each file can be considered a class. Each class will have an associated opaque data structure. Fields within the data structure are accessed through the functions (equivalent to member functions) in the file. If there's no function available to access a particular member, it's because it shouldn't be amended.

Each class has `class_new()` and `class_delete()` functions used for instantiating and finalising the class data structure.

The documentation should indicate whether a particular member variable is owned by its parent class. If it is, it will be automatically freed when its parent is freed. Otherwise it may need to be freed separately. These details should be made clear in the documentation.
 
Libpico is available for Windows built using Visual Studio 2015. It is also available for Linux in either DEB or RPM format.

The instructions below assume you're using Ubuntu 16.04. It will build and run on other systems, but you'll need to adjust the instructions to suit your platform if you're using something else.

\subsection windowsinstall Windows installation

There is no specific installation for Windows. Simply download a copy of the Windows archive from the [Pico website](https:mypico.org) and unzip it to a folder called `libpico` on your hard drive. When you want to compile and link a library against libpico, ensure the `libpico/include` folder is contained in your includes path, and that the `libpico` folder is included in your library path. See the \ref examples section for an idea about how to do this.

\subsubsection windowsbuild Building for Windows

To build libpico for Windows, you'll need to have the following installed on your machine.
 - Visual Studio 2015 (VS14)
 - git
 - cmake, version 2.8 or later

Here we show how you can build it at the command line, but `cmake` will also produce Visual Studio project files if you ask it to.

Open a Visual Studio command shell and then you can use the following sequence of commands to build the library.

\verbatim
git clone git@github.com:mypico/libpico.git
call "%VS140COMNTOOLS%..\..\VC\vcvarsall.bat" amd64
cd libpico
git submodule update --init
mkdir build
cd build 
cmake .. -G "NMake Makefiles" -DCURL_INCLUDE_DIR=C:\libcurl\include -DCURL_LIBRARY=C:\libcurl\lib\dll-release-x64\libcurl.lib -DCURL_LIBRARY_DEBUG=C:\libcurl\lib\dll-debug-x64\libcurl_debug.lib
nmake picobt_static
nmake
cd ..\LibPicoCSharp
msbuild.exe /p:Configuration=Release /p:Platform="Any CPU" /p:OutDir=..\..\build
cd ..\build
\endverbatim

\subsection linuxinstall Linux installation

Before installing libpico you should decide whether you want the runtime, or developer version of the library. If you just want to run other programs that use libpico, the runtime version will be fine. If you plan to develop your own software that needs libpico, or build software from source that uses libpico, you'll need the developer version.

\subsubsection linuxinstallbinrun Runtime binary installation

The easiest way to install libpico is directly from the Pico PPA. Enter the following commands to add the PPA to your system:

\verbatim
sudo add-apt-repository ppa:mypico/ppa
sudo apt-get update
\endverbatim

Then install the libpico runtime using the following commands. As well as libpico, this will also automatically install all of its dependencies.

\verbatim
sudo apt install libpico1
\endverbatim

If you don't want to add the Pico PPA, you can also download the latest package from the [Pico website](https:mypico.org). You'll need to install all of the following dependencies yourself if you do it this way.

 - libpicobt-run, version 0.0.1 or later
 - libssl, version 1.0.0 or later
 - libcurl3
 - libqrencode3
 - libbluetooth3, version 4.91 or later
 - liburl-dispatcher1
 - libc6, version 2.14 or later

See the [libpicobt](../libpicobt) documentation for how to install libpicobt-run. Apart from this, on Ubuntu 16.04 the remainder of these dependencies can be installed as follows.

\verbatim
sudo apt install libssl1.0.0 libcurl3 libqrencode3 libbluetooth3 liburl-dispatcher1 libc6
\endverbatim

Then use the following to install libpico:

<pre class="fragment">
sudo dpkg -i libpico1_$(VERSION)-1_amd64.deb
</pre>

\subsubsection linuxinstallbindev Developer binary installation

The easiest way to install the libpico developer files is directly from the Pico PPA. Enter the following commands to add the PPA to your system:

\verbatim
sudo add-apt-repository ppa:mypico/ppa
sudo apt-get update
\endverbatim

Then install the libpico developer files using the following commands. As well as libpico, this will also automatically install all of its dependencies.

\verbatim
sudo apt install libpico1-dev
\endverbatim

If you don't want to add the Pico PPA, you can also download the latest package from the [Pico website](https:mypico.org). You'll need to install all of the following dependencies yourself if you do it this way.

To build on Linux you'll need the following (at least):
 - libpicobt-dev, version 0.0.1 or later
 - libpicobt-run, version 0.0.1 or later
 - libssl-dev
 - libcurl4-openssl-dev
 - libqrencode-dev
 - libbluetooth-dev, version 4.91 or later
 - liburl-dispatcher1-dev
 - libc6, version 2.14 or later

See the [libpicobt](../libpicobt) documentation for how to install libpicobt-run and libpicobt-dev. Apart from these, on Ubuntu 16.04 the remainder of these dependencies can be installed as follows.

\verbatim
sudo apt install libssl-dev libcurl4-openssl-dev libqrencode-dev libbluetooth-dev liburl-dispatcher1-dev libc6
\endverbatim

Then use the following to install libpico:

<pre class="fragment">
sudo dpkg -i libpico1_$(VERSION)-1_amd64.deb
sudo dpkg -i libpico1-dev_$(VERSION)-1_amd64.deb
</pre>

\subsubsection linuxbuild Building from source for Linux

To build on Linux you'll need the following (at least):
 - libpicobt-dev, version 0.0.1 or later
 - libpicobt-run, version 0.0.1 or later
 - libssl-dev
 - libcurl4-openssl-dev
 - libqrencode-dev
 - libbluetooth-dev, version 4.91 or later
 - liburl-dispatcher1-dev
 - libc6, version 2.14 or later
 - pkg-config
 - autotools-dev
 - devscripts
 - debhelper
 - dh-systemd
 - dh-exec
 - build-essential
 - git
 - gcc
 - make
 - check
 - openssh-client
 - doxygen
 - graphviz

See the [libpicobt](../libpicobt) documentation for how to install libpicobt-run and libpicobt-dev. Apart from these, on Ubuntu 16.04 the remainder of these dependencies can be installed as follows.

\verbatim
sudo apt install \
  libssl-dev libcurl4-openssl-dev libqrencode-dev libbluetooth-dev liburl-dispatcher1-dev libc6 \
  pkg-config autotools-dev devscripts debhelper dh-systemd dh-exec build-essential \
  git gcc make check openssh-client doxygen graphviz
\endverbatim

Now grab yourself a copy of the code from the repository and compile the libraries.

\verbatim
git clone git@github.com:mypico/libpico.git
cd libpico
./configure
make
make check
\endverbatim

The last command runs the unit tests, so isn't strictly required, but is useful for reassurance that everything built correctly. To generate the DEB packages on a Debian-based system run something like the following:

\verbatim
debuild -us -uc -b --lintian-opts -X changes-file
\endverbatim

This will build the two libpico packages and leave them in the parent directory. You can now install these packages so they're ready for use on your system.

<pre class="fragment">
sudo dpkg -i ../libpico1_$(VERSION)-1_amd64.deb
sudo dpkg -i ../libpico1-dev_$(VERSION)-1_amd64.deb
</pre>

The documentation you're reading now was generated using doxygen. If you want to generate it yourself you do so as follows.

\verbatim
make doxygen
\endverbatim

\subsection examples Example code

Below are two short snippets of code for performing pairing and authentication using libpico. Both of these are for running on the server. To test them, you'll need the Pico app installed on a phone to scan the QR codes they generate.

To build the examples on Linux, save out the code as `pair.c` and `auth.c` and use

\verbatim
gcc pair.c -o pair `pkg-config --cflags --libs libpico-1`
gcc auth.c -o auth `pkg-config --cflags --libs libpico-1`
\endverbatim

The <a href="examples.html">examples</a> page provides some example code for how to use the functionality of libpico.

\subsubsection pair Example pairing code

\include pair.c

\subsubsection auth Example authentication code

\include auth.c

\subsection story A story

<em>[If you've got this far, you deserve something a little different.]</em>

The cursor blinked at Elly. The next string she'd type in at the keyboard would leave the cursor blinking in the same position, as if she'd done nothing. And yet, this was the most important part of the whole process: the part only she could do.

She knew there was a plan, knew even that she had come up with the plan, but didn't know what the plan was. Maybe if she stared at the screen long enough it would come to her, but she doubted it. If she could get access to the server, she could review the logs of their trial run and reverse engineer the plan.

That would be fine if only she could access the server. She typed. The cursor blinked but didn't move. She hit enter. Waited, but knew immediately it was no good. If she'd entered the correct password it would have logged her in immediately. A delay meant another failure. Blink, blink, blink.

"Login incorrect"

She cursed. Any normal civilian would choose an eight-character password made up of a word with some letters replaced with numbers and punctuation marks. She could crack the shadow file using her 8-GPU rig in a matter of days, if not hours. But the person who hacked her account would have used a strong randomly-generated password.

She knew this because she used strong passwords herself. Impossible for any normal person to remember, but more secure. Her adversary likely used a hardware key logger to get her password, something even the most paranoid security freak is vulnerable to.

What Elly really needed was a better authentication mechanism. Something that didn't require her to use a password, didn't rely on keyboard entry and was as secure -- more secure even -- than her long random passwords. If only such a thing existed, thought Elly, she'd be in a very different position right now.

\subsection authors Authors

The libpico library was created by the <a href="https://mypico.org">Pico Team</a>.

*/

/**

\example pair.c

This example shows how you can perform the Pico pairing process using libpico.

\example auth.c

This example shows how you can perform the Pico authentication process using libpico. The authentication will only complete successfully for a Pico that previously paired successfully.

*/

/**
 * @defgroup Communication Communication
 * @brief Library functions for managing communications
 *
 * libpico requires a channel so that the verifier can communicate with the
 * prover. Different channels can be used, such as HTTP via rendezvous point
 * or bluetooth. This module supports different communication types.
 * 
 */

/**
 * @defgroup Protocol Protocol
 * @brief Library functions for performing the protocol
 *
 * The majority of the libpico functionality is for the purpose of performing
 * the Pico SIGMA-I protocol between a prover and a verifier. This module
 * provides high-level data structures and functions for performing this 
 * protocol.
 * 
 */

/**
 * @defgroup Datahandling Data Handling
 * @brief Library functions for managing and converting data
 *
 * When sending data between the prover and verifer, data is transmitted in
 * a variety of data formats, including base64, json and length-prepended
 * binary chunks. This module provides support for storing and manipulating
 * data in various formats.
 * 
 */

/**
 * @defgroup Utility Utility
 * @brief Static utility functions
 *
 * This module provides access to a range of utility functions that are used
 * in various places. These will mostly be static utilities, and many may have
 * no user-facing purpose.
 * 
 */

/**
 * @defgroup Debug Debug
 * @brief Library functions for facilitating debugging
 *
 * Debugging can be painful. This module provides funcionality to ease the
 * debugging pain, for example offering logging, memory management checks
 * and so on.
 * 
 */

/**
 * @defgroup UI UI
 * @brief User interface library functions
 *
 * As a general rule libpico doesn't concern itself with UI issues. Once
 * exception is through the use of QR codes, which often need to be generated
 * for use with Pico. For the few relevant parts of Pico that are user-facing,
 * this module provides support.
 * 
 */

/**
 * @defgroup Crypto Cryptography
 * @brief Library functions for performing cryptographic functions
 *
 * This isn't a general crypto library, and libpico uses OpenSSL to provide its
 * underlying cryptography capabilities. Nevertheless, it's often useful to
 * wrap this functionality with an API that's more applicable for Pico. This
 * module provides an interface for Pico-specific cryptography.
 * 
 */

/**
 * @defgroup Message Message
 * @brief Library functions for serialising and deserialising messages
 *
 * The Pico protocol is primarily concerned with sending messages backwards and
 * forwards between the prover and verifier. These messages have defined
 * structures. This module provides easy funcionality for constructing,
 * serialising and deserialising these messages.
 * 
 */

/**
 * @defgroup Storage Data Storage
 * @brief Library functions for storing relevant Pico data
 *
 * In general libpico doesn't concern itself with data storage. However, 
 * occasionally the library will need access to data in a format it can use.
 * This module provides methods for dealing with such data, including
 * key data associated with users.
 * 
 */





