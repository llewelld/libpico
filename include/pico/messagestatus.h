/** \ingroup Message
 * @file
 * @author  David Llewellyn-Jones <David.Llewellyn-Jones@cl.cam.ac.uk>
 * @version $(VERSION)
 *
 * @section LICENSE
 *
 * (C) Copyright Cambridge Authentication Ltd, 2017
 *
 * This file is part of libpico.
 *
 * Libpico is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 *
 * Libpico is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public
 * License along with libpico. If not, see
 * <http://www.gnu.org/licenses/>.
 *
 *
 * @brief Message for finalising the SIGMA-I authentication protocol
 * @section DESCRIPTION
 *
 * The MessageStatus class allows a Status message to ge generated by
 * the server to be sent to the Pico.
 * 
 * This represents the second message forming the second round trip of the
 * Sigma-I protocol:
 * QR-code (KeyAuth or KeyPair); Start; ServiceAuth; PicoAuth; Status.
 *
 * The structure of the message is as follows
 * {"iv":"B64","encryptedData":"B64-ENC","sessionId":0}
 *
 */

/** \addtogroup Message
 *  @{
 */

#ifndef __MESSAGESTATUS_H
#define __MESSAGESTATUS_H (1)

#include "pico/shared.h"
#include "pico/buffer.h"

// Defines

/**
 * @brief Message status result code, OK, no continuous
 *
 * The return value used for the status when authentication was successful
 * and the client doesn't want to perform any continuous authentication.
 */
#define MESSAGESTATUS_OK_DONE ((char)0)

/**
 * @brief Message status result code, OK, continuously authenticate
 *
 * The return value used for the status when authentication was successful
 * and the client wants to perform ongoing continuous authentication.
 */
#define MESSAGESTATUS_OK_CONTINUE ((char)1)

/**
 * @brief Message status result code, authentication fail
 *
 * The return value used for the status when authentication was unsuccessful.
 * No continuous authentication can follow in this case.
 */
#define MESSAGESTATUS_REJECTED ((char)-1)

/**
 * @brief Message status result code, unexpected error
 *
 * The return value used for the status when an unexpected error occurs.
 * This could happen, for example, if no status value is sent, or the status
 * message is malformed. It should be considered the same as a REJECTED value.
 * No continuous authentication can follow in this case.
 */
#define MESSAGESTATUS_ERROR ((char)-2)

/**
 * @brief An invalid message status result code
 *
 * The status code value used by libpico before a valid status code is
 * available, for example if one tries to get the status before authentication
 * has completed.
 */
#define MESSAGESTATUS_INVALID ((char)-128)

// Structure definitions

/**
 * The internal structure can be found in messagestatus.c
 */
typedef struct _MessageStatus MessageStatus;

// Function prototypes

MessageStatus * messagestatus_new();
void messagestatus_delete(MessageStatus * messagestatus);
void messagestatus_set(MessageStatus * messagestatus, Shared * shared, Buffer const * extraData, char status);
char messagestatus_get_status(MessageStatus * messagestatus);
void messagestatus_serialize(MessageStatus * messagestatus, Buffer * buffer);
void messagestatus_set_session_id(MessageStatus * messagestatus, int sessionId);
bool messagestatus_deserialize(MessageStatus * messagestatus, Buffer const * buffer);
Buffer * messagestatus_get_extra_data(MessageStatus * messagestatus);
void messagestatus_set_extra_data(MessageStatus * messagestatus, Buffer const * extraData);

// Function definitions

#endif

/** @} addtogroup Message */

