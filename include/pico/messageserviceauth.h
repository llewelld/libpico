/** \ingroup Message
 * @file
 * @author  David Llewellyn-Jones <David.Llewellyn-Jones@cl.cam.ac.uk>
 * @version $(VERSION)
 *
 * @section LICENSE
 *
 * (C) Copyright Cambridge Authentication Ltd, 2017
 *
 * This file is part of libpico.
 *
 * Libpico is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 *
 * Libpico is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public
 * License along with libpico. If not, see
 * <http://www.gnu.org/licenses/>.
 *
 *
 * @brief Message for authenticating the verifier to the prover
 * @section DESCRIPTION
 *
 * The MessageServiceAuth class allows a ServiceAuth message to ge generated by
 * the server to be sent to the Pico.
 * 
 * This represents the second message forming the first round trip of the
 * Sigma-I protocol:
 * QR-code (KeyAuth or KeyPair); Start; ServiceAuth; PicoAuth; Status.
 *
 * The structure of the message is as follows
 * {"serviceEphemPublicKey":"B64-PUB-KEY","serviceNonce":"B64-NONCE","sessionId":0,"encryptedData":"B64-ENC","iv":"B64"}
 *
 */

/** \addtogroup Message
 *  @{
 */

#ifndef __MESSAGESERVICEAUTH_H
#define __MESSAGESERVICEAUTH_H (1)

#include <openssl/ec.h>
#include "pico/keypair.h"
#include "pico/nonce.h"
#include "pico/shared.h"
#include "pico/buffer.h"

// Defines

// Structure definitions

/**
 * The internal structure can be found in messageserviceauth.c
 */
typedef struct _MessageServiceAuth MessageServiceAuth;

// Function prototypes

MessageServiceAuth * messageserviceauth_new();
void messageserviceauth_delete(MessageServiceAuth * messageserviceauth);
void messageserviceauth_set(MessageServiceAuth * messageserviceauth, Shared * shared, int sessionId);
void messageserviceauth_serialize(MessageServiceAuth * messageserviceauth, Buffer * buffer);
bool messageserviceauth_deserialize(MessageServiceAuth * messagepicoauth, Buffer const * buffer);

// Function definitions

#endif

/** @} addtogroup Message */

